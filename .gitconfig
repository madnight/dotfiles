[credential]
    helper = store
[help]
	# Automatically correct and execute mistyped commands
    autocorrect = 1
[diff]
    tool = delta
[merge]
    tool = delta
[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix
[pull]
    rebase = true
[commit]
    gpgsign = false
[user]
    email = mail@beuke.org
	name = Fabian Beuke
	signingkey = E0914083
[rerere]
	# Reuse recorded resolution of conflicted merges
	enabled = true
[alias]
    wip = "!f() { git add -A; git ls-files --deleted -z | xargs -0 -r git rm; s=`git show --format=%s HEAD | head -1`; if [ \"wip\" = \"$s\" ]; then git commit --amend -m \"wip\"; else git commit -m \"wip\"; fi;}; f"
    s = "!f(){ git reset --soft HEAD~${1} && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; };f"
    sqp = "!f(){ git add -u && git commit -m 'squash' && git reset --soft HEAD~2 && git commit -m\"$(git log --format=%B --reverse HEAD..HEAD@{2})\" && git push -f origin \"$(git rev-parse --abbrev-ref HEAD)\"; };f"
    ls = "!f(){ git log --pretty=format:'%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]' --graph --decorate --date=relative | nl '-s: ' | more;};f"
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    publish = "!git push -u origin $(git branch-name)"
    review = difftool origin/master...
    la = "!git config -l | grep alias | cut -c 7-"
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    b = "for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"
    # Clone a repository including all submodules
    c = clone --recursive
    # commit all changes
    ca = !git add -a && git commit -av
    # switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -v
    remotes = remote -v
    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    # Remove branches that have already been merged with master a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
[core]
	pager = delta
	compression = 0
[http]
	postBuffer = 524288000
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color]
	ui = true
[diff-so-fancy]
	markEmptyLines = false
	changeHunkIndicators = false
	stripLeadingSymbols = false
	useUnicodeRuler = false
    [diff]
      tool = delta
    [difftool]
      prompt = false
    [difftool "icdiff"]
      cmd = /usr/bin/icdiff --line-numbers $LOCAL $REMOTE
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[interactive]
    diffFilter = delta --color-only
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
    side-by-side = true
